---
import { client } from '../lib/prismicio'
import { asText } from '@prismicio/helpers'

const proyectos = await client.getAllByType('proyecto')

const proyectosTriplicados = [...proyectos, ...proyectos, ...proyectos];
const middleIndex = proyectos.length; // para saber cuándo "resetear"
---


<div class="carousel horizontal-scroll flex overflow-x-scroll overflow-y-visible gap-4 px-10" id="carousel">
  {proyectosTriplicados.map((proyecto) => (
    <a
      id="video-item"
      href={`/proyectos/${proyecto.uid}`}
      class="proyecto flex-shrink-0 w-1/6 relative group horizontal-scroll snap-proximity snap-center"
      view-transition-name={`video-${proyecto.uid}`}
      data-tags={proyecto.tags.join(' ').toLowerCase()}
      >
      
      <!-- Título encima visible con animación suave -->
      <div class="absolute left-0 w-full flex justify-between items-center px-1 text-black text-xs sm:text-sm translate-y-0 group-hover:-translate-y-6 transition-all duration-300 pointer-events-none">
        <h3 class="font-semibold leading-tight">{asText(proyecto.data.titulo)}</h3>
        <p class="text-gray-900">{proyecto.data.fecha}</p>
      </div>

      <!-- Miniatura -->
      <div
        class="aspect-[3/2] relative overflow-hidden w-full cursor-pointer z-10"
        data-slug={proyecto.uid}
      >
        <video
          src={proyecto.data.enlace.url}
          muted
          preload="none"
          autoplay
          playsinline
          loop
          class="absolute top-0 left-0 w-full h-full object-contain bg-black opacity-0 group-hover:opacity-100 transition-opacity duration-300"
        ></video>
        <img
          src={proyecto.data.miniatura.url}
          alt={asText(proyecto.data.titulo)}
          class="w-full h-full object-cover"
        />
      </div>

    </a>
  ))}
</div>

<style>
  .horizontal-scroll {
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
  }

  .carousel::-webkit-scrollbar {
    display: none;
  }

  .carousel {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .carousel.dragging {
    cursor: grabbing;
    user-select: none;
  }

  .carousel video,
  .carousel img {
    pointer-events: none;
    -webkit-user-drag: none;
  }
</style>


<!-- Script para el carrusel -->
<script is:inline>
  const carousel = document.getElementById('carousel');

  // Scroll con la rueda y gesto de dos dedos en el trackpad
  carousel.addEventListener('wheel', (e) => {
    e.preventDefault();
    const movement = e.deltaY + e.deltaX;
    carousel.scrollLeft += movement * 25;
  }, { passive: false });

  // Scroll por click y arrastre
  let isDown = false;
  let startX;
  let scrollLeft;

  carousel.addEventListener('mousedown', (e) => {
    isDown = true;
    carousel.classList.add('dragging');
    startX = e.pageX - carousel.offsetLeft;
    scrollLeft = carousel.scrollLeft;
  });

  carousel.addEventListener('mouseleave', () => {
    isDown = false;
    carousel.classList.remove('dragging');
  });

  carousel.addEventListener('mouseup', () => {
    isDown = false;
    carousel.classList.remove('dragging');
  });

  carousel.addEventListener('mousemove', (e) => {
    if (!isDown) return;
    e.preventDefault();
    const x = e.pageX - carousel.offsetLeft;
    const walk = (x - startX) * 2;
    carousel.scrollLeft = scrollLeft - walk;
  });

  // 3. Scroll por gesto táctil (touch)
  carousel.addEventListener('touchstart', (e) => {
    // Tomamos el primer punto de toque
    isDown = true;
    carousel.classList.add('dragging');
    startX = e.touches[0].pageX - carousel.offsetLeft;
    scrollLeft = carousel.scrollLeft;
  }, { passive: true });

  carousel.addEventListener('touchmove', (e) => {
    if (!isDown) return;
    // Evitamos el scroll vertical nativo mientras arrastramos
    e.preventDefault();
    const x = e.touches[0].pageX - carousel.offsetLeft;
    const walk = (x - startX) * 2;
    carousel.scrollLeft = scrollLeft - walk;
  }, { passive: false });

  carousel.addEventListener('touchend', () => {
    isDown = false;
    carousel.classList.remove('dragging');
  });

  carousel.addEventListener('touchcancel', () => {
    isDown = false;
    carousel.classList.remove('dragging');
  });


  // Reproducir vídeo al hacer hover y bloquear drag nativo en cada video
  document.querySelectorAll('.carousel video').forEach(video => {
    video.addEventListener('mouseenter', () => video.play());
    video.addEventListener('mouseleave', () => {
      video.pause();
      video.currentTime = 0;
    });
    video.addEventListener('dragstart', e => e.preventDefault());
  });

  // Evitar selección de imágenes al arrastrar
  document.querySelectorAll('.carousel img').forEach(img => {
    img.addEventListener('dragstart', e => e.preventDefault());
  });
</script>

<!-- Script para el scroll infinito -->
<script is:inline>

  // Espera a que cargue todo
  window.addEventListener('load', () => {
    const items = carousel.children;
    const itemWidth = items[0].offsetWidth + 16; // Añade el gap (ajusta si tu Tailwind tiene otro)

    // Empieza desde la primera "repetición"
    carousel.scrollLeft = itemWidth * items.length / 3;

    let isScrolling = false;

    function loopScroll() {
      const maxScroll = carousel.scrollWidth;
      const scrollLeft = carousel.scrollLeft;

      if (scrollLeft <= itemWidth) {
        // Si estamos al inicio, saltamos al medio
        carousel.scrollLeft = scrollLeft + itemWidth * (items.length / 3);
      } else if (scrollLeft + carousel.clientWidth >= maxScroll - itemWidth) {
        // Si llegamos al final, saltamos al medio
        carousel.scrollLeft = scrollLeft - itemWidth * (items.length / 3);
      }
    }

    carousel.addEventListener('scroll', () => {
      if (!isScrolling) {
        window.requestAnimationFrame(() => {
          loopScroll();
          isScrolling = false;
        });
        isScrolling = true;
      }
    });
  });
</script>